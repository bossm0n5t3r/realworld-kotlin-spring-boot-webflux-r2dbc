name: Deploy realworld-server

on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  PORT: 1033
  IMAGE_TAG: ${{ github.sha }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  APPLICATION_NAME: ${{ vars.REALWORLD_SERVER }}
  AWS_CODE_DEPLOY_APPLICATION: ${{ vars.ZAKUM_SERVER }}
  AWS_CODE_DEPLOY_DEPLOYMENT_GROUP: ${{ vars.ZAKUM_SERVER }}
  AWS_S3_BUCKET: ${{ vars.REALWORLD_SERVER }}
  ECR_REPOSITORY: ${{ vars.REALWORLD_SERVER }}

jobs:
  deploy-realworld-server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Java Build
        run: |
          ./gradlew clean build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Setting deploy.sh
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          mkdir scripts
          touch scripts/deploy.sh
          echo "aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com" >> scripts/deploy.sh
          echo "docker stop $APPLICATION_NAME" >> scripts/deploy.sh
          echo "docker rm $APPLICATION_NAME" >> scripts/deploy.sh
          echo "docker image prune -a -f" >> scripts/deploy.sh
          echo "docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> scripts/deploy.sh
          echo "docker run -p $PORT:$PORT -d --restart always --name $APPLICATION_NAME $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> scripts/deploy.sh

      - name: Upload to s3
        run: |
          zip -r deploy-$IMAGE_TAG.zip ./scripts appspec.yml
          aws s3 cp --region $AWS_REGION --acl private ./deploy-$IMAGE_TAG.zip s3://$AWS_S3_BUCKET

      - name: Deploy
        run: |
          aws deploy create-deployment --application-name $AWS_CODE_DEPLOY_APPLICATION \
          --deployment-config-name CodeDeployDefault.OneAtATime \
          --deployment-group-name $AWS_CODE_DEPLOY_DEPLOYMENT_GROUP \
          --s3-location bucket=$AWS_S3_BUCKET,bundleType=zip,key=deploy-$IMAGE_TAG.zip
